{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CorrelatedCounts Getting Started In order to run the correlated count models, you will need to install Python to your computer. It is most helpful to use miniconda , and then create an environment that will be used specifically with the correlated count package. The dependencies for this package are numpy and scipy . Installation To install the package, clone the GitHub repository here: git clone https://github.com/mbannick/CorrelatedCounts.git Once you have cloned the package, activate your conda envirionment and run cd CorrelatedCounts python setup.py install","title":"Home"},{"location":"#welcome-to-correlatedcounts","text":"","title":"Welcome to CorrelatedCounts"},{"location":"#getting-started","text":"In order to run the correlated count models, you will need to install Python to your computer. It is most helpful to use miniconda , and then create an environment that will be used specifically with the correlated count package. The dependencies for this package are numpy and scipy .","title":"Getting Started"},{"location":"#installation","text":"To install the package, clone the GitHub repository here: git clone https://github.com/mbannick/CorrelatedCounts.git Once you have cloned the package, activate your conda envirionment and run cd CorrelatedCounts python setup.py install","title":"Installation"},{"location":"code/","text":"Code In order to fit a model, you will need the following functions: from ccount.run import df_to_model, add_predictions_to_df","title":"Code"},{"location":"code/#code","text":"In order to fit a model, you will need the following functions: from ccount.run import df_to_model, add_predictions_to_df","title":"Code"},{"location":"methods/","text":"Methods The correlated counts framework is useful for modeling the occurrences of multiple outcomes that arise from the same individual or observational unit (e.g. location). Consider m observations, with n outcomes. For example, one might model the number of faculty (outcome n=1) and students (outcome n=2) at 100 universities. We model these in a correlated framework because it is reasonable to assume that the number of faculty at a university is likely correlated with the number of students. Returning to the general case with m observations and n outcomes, in the linear context, we assume that the mean of the outcome is a function of the covariates for this outcome X_{i,j} , the coefficients to be estimated for this outcome \\beta{j} , and a random effect U_{i,j} E[Y_{i,j}|X_{i,j}, \\beta, U_{i,j}] = X_{i,j} \\beta_{j} + U_{i,j} for the i^{th} observation and the j^{th} outcome, where \\epsilon_{i} \\sim N(0, \\sigma^2) but with the additional assumption that the U_{i,} are multivariate normal, with mean 0 and covariance given by D . U_{i,.} \\sim N_{n}(0, D) \\quad D \\in \\mathbb{R}^n The U_{i,j} 's are correlated with one another, and that correlation drives correlation in the mean. This method follows that outlined by Rodrigues-Motta and colleages (2012) . In this simple case, Y \\sim Normal , but when working with counts, it is more common to use discrete distributions like the Poisson distribution or the Negative Binomial distribution. In cases where we have extremely rare events, we may also consider extensions to these distributions that allow for more zeros than would be typically realized in the discrete distributions (e.g. zero-inflation, hurdle models). As such, we will usually have more than one parameter to estimate besides the mean outcome. Most generally, consider that now we have l parameters. We have some probability distribution for Y , that is dependent on X_{i,j,k} , \\beta_{j,k} and U_{i,j,k} , f(Y_{i,j}|X_{i,j,k}, \\beta_{j,k}, U_{i,j,k} \\quad k = 1, ..., l) where the covariates X and random effects U can differ with respect to each of the l parameters of the discrete distribution (e.g. the mean and the over-dispersion parameter for the variance in the Negative Binomial distribution). Depending on the support for the parameter, we may need to transform the linear combination of X_{i,j,k} \\beta_{j,k} + U_{i,j,k} into the space that makes sense for the parameter and distribution at hand. For example, the mean of the Poisson distribution must be >0 , so a natural link function that does this transformation is e^{X_{i,j,k} \\beta_{j,k} + U_{i,j,k}} . Offsets Likelihood Weights Optimization To estimate the parameters of this model, we add a prior for U that incorporates D , and then optimize f(Y_{i,j}|...) with respect to \\beta , U and D .","title":"Methods"},{"location":"methods/#methods","text":"The correlated counts framework is useful for modeling the occurrences of multiple outcomes that arise from the same individual or observational unit (e.g. location). Consider m observations, with n outcomes. For example, one might model the number of faculty (outcome n=1) and students (outcome n=2) at 100 universities. We model these in a correlated framework because it is reasonable to assume that the number of faculty at a university is likely correlated with the number of students. Returning to the general case with m observations and n outcomes, in the linear context, we assume that the mean of the outcome is a function of the covariates for this outcome X_{i,j} , the coefficients to be estimated for this outcome \\beta{j} , and a random effect U_{i,j} E[Y_{i,j}|X_{i,j}, \\beta, U_{i,j}] = X_{i,j} \\beta_{j} + U_{i,j} for the i^{th} observation and the j^{th} outcome, where \\epsilon_{i} \\sim N(0, \\sigma^2) but with the additional assumption that the U_{i,} are multivariate normal, with mean 0 and covariance given by D . U_{i,.} \\sim N_{n}(0, D) \\quad D \\in \\mathbb{R}^n The U_{i,j} 's are correlated with one another, and that correlation drives correlation in the mean. This method follows that outlined by Rodrigues-Motta and colleages (2012) . In this simple case, Y \\sim Normal , but when working with counts, it is more common to use discrete distributions like the Poisson distribution or the Negative Binomial distribution. In cases where we have extremely rare events, we may also consider extensions to these distributions that allow for more zeros than would be typically realized in the discrete distributions (e.g. zero-inflation, hurdle models). As such, we will usually have more than one parameter to estimate besides the mean outcome. Most generally, consider that now we have l parameters. We have some probability distribution for Y , that is dependent on X_{i,j,k} , \\beta_{j,k} and U_{i,j,k} , f(Y_{i,j}|X_{i,j,k}, \\beta_{j,k}, U_{i,j,k} \\quad k = 1, ..., l) where the covariates X and random effects U can differ with respect to each of the l parameters of the discrete distribution (e.g. the mean and the over-dispersion parameter for the variance in the Negative Binomial distribution). Depending on the support for the parameter, we may need to transform the linear combination of X_{i,j,k} \\beta_{j,k} + U_{i,j,k} into the space that makes sense for the parameter and distribution at hand. For example, the mean of the Poisson distribution must be >0 , so a natural link function that does this transformation is e^{X_{i,j,k} \\beta_{j,k} + U_{i,j,k}} .","title":"Methods"},{"location":"methods/#offsets","text":"","title":"Offsets"},{"location":"methods/#likelihood-weights","text":"","title":"Likelihood Weights"},{"location":"methods/#optimization","text":"To estimate the parameters of this model, we add a prior for U that incorporates D , and then optimize f(Y_{i,j}|...) with respect to \\beta , U and D .","title":"Optimization"},{"location":"models/","text":"Available Models Parametrizing a Model Each of the available models is described below. They have different functional forms and therefore different parameters, and possibly different link functions for those parameters. The function to run a model is ccount.run.df_to_model , and requires the argument model_type . You determine the order of the outcomes by the order of the elements of the list of variable names that you pass as the outcomes argument, but you do not determine the order of the parameters in the model (that is explained below). The fixed effects \\beta are allowed to differ across the n outcomes and l parameters. The order in which you indicate the fixed_effects argument matters, and that order is described below. For example, for n=2 and l=2 , fixed_effects=[ [ ['covariate_1'], # first parameter - first outcome ['covariate_1'] # first parameter - second outcome ], [ ['covariate_1', 'covariate_2'], # second parameter - first outcome ['covariate_2'] # second parameter - second outcome ] ] will add 'covariate_1' as a covariate for the first parameter on both outcomes, add 'covariate_2' as the only covariate for the second parameter and second outcome, and add both 'covariate_1' and 'covariate_2' as covariates for the second parameter and first outcome. Model Choices Zero-Inflated Poisson Model The Zero-Inflated Poisson model (ZIP) has a Poisson distribution, with a binomial distribution that determines that probability of the Poisson random variable realization being masked by an additional zero. Zeros can arise from the Poisson distribution or the Binomial distribution. Parameter 1 : probability of a structural zero (coming from the Binomial distribution) Parameter 2 : mean of the Poisson distribution To fit this model, use model_type = \"zero_inflated_poisson\" , which will use an exponential link function for the mean and the inverse logit function for the probability of a structural zero. Alternatively, you can use model_type = \"zero_inflated_poisson_relu\" , which will use a modified link function for the mean that is more stable for large values. Poisson Hurdle Model The Poisson hurdle model has a Poisson distribution that has been truncated at 0, and re-normalized for its new support, and a binomial model for the probability of a 0. In this model, zeros can only arise from the Binomial distribution. Parameter 1 : probability of a zero Parameter 2 : mean of the Poisson before truncation To fit this model, use model_type = \"hurdle_poisson\" , which will use an exponential link function for the mean and the inverse logit function for the probability of a structural zero. Alternatively, you can use model_type = \"hurdle_poisson_relu\" , which will use a modified link function for the mean that is more stable for large values. Negative Binomial The Negative Binomial model is an extension of the Poisson model that allows for over-dispersion (since in the Poisson distribution the mean = variance). Parameter 1 : mean of the distribution Parameter 2 : over-dispersion parameter (large values means variance >> mean) To fit this model, use model_type = \"negative_binomial\" , which will use an exponential link function for the mean and the over-dispersion parameter.","title":"Models"},{"location":"models/#available-models","text":"","title":"Available Models"},{"location":"models/#parametrizing-a-model","text":"Each of the available models is described below. They have different functional forms and therefore different parameters, and possibly different link functions for those parameters. The function to run a model is ccount.run.df_to_model , and requires the argument model_type . You determine the order of the outcomes by the order of the elements of the list of variable names that you pass as the outcomes argument, but you do not determine the order of the parameters in the model (that is explained below). The fixed effects \\beta are allowed to differ across the n outcomes and l parameters. The order in which you indicate the fixed_effects argument matters, and that order is described below. For example, for n=2 and l=2 , fixed_effects=[ [ ['covariate_1'], # first parameter - first outcome ['covariate_1'] # first parameter - second outcome ], [ ['covariate_1', 'covariate_2'], # second parameter - first outcome ['covariate_2'] # second parameter - second outcome ] ] will add 'covariate_1' as a covariate for the first parameter on both outcomes, add 'covariate_2' as the only covariate for the second parameter and second outcome, and add both 'covariate_1' and 'covariate_2' as covariates for the second parameter and first outcome.","title":"Parametrizing a Model"},{"location":"models/#model-choices","text":"","title":"Model Choices"},{"location":"models/#zero-inflated-poisson-model","text":"The Zero-Inflated Poisson model (ZIP) has a Poisson distribution, with a binomial distribution that determines that probability of the Poisson random variable realization being masked by an additional zero. Zeros can arise from the Poisson distribution or the Binomial distribution. Parameter 1 : probability of a structural zero (coming from the Binomial distribution) Parameter 2 : mean of the Poisson distribution To fit this model, use model_type = \"zero_inflated_poisson\" , which will use an exponential link function for the mean and the inverse logit function for the probability of a structural zero. Alternatively, you can use model_type = \"zero_inflated_poisson_relu\" , which will use a modified link function for the mean that is more stable for large values.","title":"Zero-Inflated Poisson Model"},{"location":"models/#poisson-hurdle-model","text":"The Poisson hurdle model has a Poisson distribution that has been truncated at 0, and re-normalized for its new support, and a binomial model for the probability of a 0. In this model, zeros can only arise from the Binomial distribution. Parameter 1 : probability of a zero Parameter 2 : mean of the Poisson before truncation To fit this model, use model_type = \"hurdle_poisson\" , which will use an exponential link function for the mean and the inverse logit function for the probability of a structural zero. Alternatively, you can use model_type = \"hurdle_poisson_relu\" , which will use a modified link function for the mean that is more stable for large values.","title":"Poisson Hurdle Model"},{"location":"models/#negative-binomial","text":"The Negative Binomial model is an extension of the Poisson model that allows for over-dispersion (since in the Poisson distribution the mean = variance). Parameter 1 : mean of the distribution Parameter 2 : over-dispersion parameter (large values means variance >> mean) To fit this model, use model_type = \"negative_binomial\" , which will use an exponential link function for the mean and the over-dispersion parameter.","title":"Negative Binomial"}]}